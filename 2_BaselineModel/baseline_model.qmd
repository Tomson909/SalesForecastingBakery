---
title: "Baseline Model"
format: 
 html: 
    toc: true
    toc-location: left
    number-sections: true
    smooth-scroll: true
    keep_qmd: true
    echo: false
    warning: false
    message: false
editor: visual
date: today
theme: cosmo
---

```{r Packages}

library(styler)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(lubridate)
library(skimr)
library(DataExplorer)
library(car)
```

```{r}
# Read the dataframe from the CSV file
train_data_baseline <- read.csv("C:/Users/sunpn1013/Desktop/Data Science Kurs/SalesForecastingBakery/2_BaselineModel/train_data.csv")

```

# Feature Selection

-   **Wochentag**
-   **Warengruppe**
-   **Schulferien**
-   **Feiertag**
-   **Kieler Woche**

## Create Tibbles for features and labels

```{r}

# Selecting relevant features and the target variable
train_features <- train_data %>% 
  select(Wochentag, Produktname, IsFerien, IsFeiertag, KielerWoche, Umsatz)


# Convert categorical variables to dummy variables
train_features <- train_features %>% 
  mutate_at(vars(Wochentag, Produktname), as.factor) %>%
  mutate_if(is.logical, as.integer) # Converting booleans to integers

# Separate the target variable
train_label <- train_features %>% 
  select(Umsatz)

# Remove the target variable from the features dataset
train_features <- select(train_features, -Umsatz)

# Dummy coding for categorical variables
train_features_dummy <- as_tibble(model.matrix(~., data = train_features))

# Selecting relevant features and the target variable
validation_features <- validation_data %>% 
  select(Wochentag, Produktname, IsFerien, IsFeiertag, KielerWoche, Umsatz)

# Convert categorical variables to dummy variables
validation_features <- validation_features %>% 
  mutate_at(vars(Wochentag, Produktname), as.factor) %>%
  mutate_if(is.logical, as.integer) # Converting booleans to integers

# Separate the target variable
validation_label <- validation_features %>% 
  select(Umsatz)

# Remove the target variable from the features dataset
validation_features <- select(validation_features, -Umsatz)

# Dummy coding for categorical variables
validation_features_dummy <- as_tibble(model.matrix(~., data = validation_features))


# Check the dimensions of the training features and labels
cat("Training Features Dimensions:", dim(train_features), "\n")
cat("Training Labels Dimensions:", dim(train_label), "\n")

# Check the dimensions of the validation features and labels
cat("Validation Features Dimensions:", dim(validation_features), "\n")
cat("Validation Labels Dimensions:", dim(validation_label), "\n")



```


# Implementation of Baseline Model

## All Products

```{r}

# Fit the linear regression model

# FÃ¼gen Sie die Spalte 'Umsatz' aus train_label zu train_features hinzu
train_data_for_model <- cbind(train_label, train_features_dummy)

# Fit the linear regression model
linear_model <- lm(Umsatz ~ ., data = train_data_for_model)

# Summarize the model
summary(linear_model)




```

# Evaluation

```{r}
# Make predictions on the validation dataset
validation_predictions <- predict(linear_model, newdata = validation_features_dummy)

# Calculate MAE, MSE, RMSE, and R-squared
mae <- mean(abs(validation_predictions - validation_label$Umsatz))
mse <- mean((validation_predictions - validation_label$Umsatz)^2)
rmse <- sqrt(mse)
r_squared <- summary(linear_model)$r.squared

# Print the metrics
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("R-squared:", r_squared, "\n")


```


