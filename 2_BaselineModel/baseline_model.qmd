---
title: "Baseline Model"
format: 
 html: 
    toc: true
    toc-location: left
    number-sections: true
    smooth-scroll: true
    keep_qmd: true
    echo: false
    warning: false
    message: false
editor: visual
date: today
theme: cosmo
---

```{r Packages}

library(styler)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(lubridate)
library(skimr)
library(DataExplorer)
library(car)
```

<<<<<<< HEAD
=======

# Feature Selection

-   **Wochentag**
-   **Warengruppe**
-   **Schulferien**
-   **Feiertag**
-   **Kieler Woche**

## Create Tibbles for features and labels

>>>>>>> 9204de4f273e1779d8109936335d397153c2cba3
```{r}

# Selecting relevant features and the target variable
train_features <- train_data %>% 
  select(Wochentag, Produktname, IsFerien, IsFeiertag, KielerWoche, Umsatz)


# Convert categorical variables to dummy variables
#train_features <- train_features %>% 
#  mutate_at(vars(Wochentag, Produktname), as.factor) %>%
#  mutate_if(is.logical, as.integer) # Converting booleans to integers

# Separate the target variable
train_label <- train_features %>% 
  select(Umsatz)

# Dummy coding for categorical variables
#train_features_dummy <- as_tibble(model.matrix(~., data = train_features))

# Selecting relevant features and the target variable
validation_features <- validation_data %>% 
  select(Wochentag, Produktname, IsFerien, IsFeiertag, KielerWoche, Umsatz)

# Convert categorical variables to dummy variables
#validation_features <- validation_features %>% 
  #mutate_at(vars(Wochentag, Produktname), as.factor) %>%
 # mutate_if(is.logical, as.integer) # Converting booleans to integers

# Separate the target variable
validation_label <- validation_features %>% 
  select(Umsatz)



# Dummy coding for categorical variables
#validation_features_dummy <- as_tibble(model.matrix(~., data = validation_features))


# Check the dimensions of the training features and labels
cat("Training Features Dimensions:", dim(train_features), "\n")
cat("Training Labels Dimensions:", dim(train_label), "\n")

# Check the dimensions of the validation features and labels
cat("Validation Features Dimensions:", dim(validation_features), "\n")
cat("Validation Labels Dimensions:", dim(validation_label), "\n")



```


<<<<<<< HEAD
-   **Wochentag**
-   **Produkt**
-   **Temperatur**
-   **Schulferien**
-   **Feiertag**
-   **Kieler Woche**

# Implementation
=======
# Implementation of Baseline Model
>>>>>>> 9204de4f273e1779d8109936335d397153c2cba3

## All Products

```{r}

# Fit the linear regression model


# Fit the linear regression model
linear_model <- lm(Umsatz ~ ., data = train_features)

# Summarize the model
summary(linear_model)




```

<<<<<<< HEAD
# Evaluation
=======
# Evaluation with validation data
>>>>>>> 9204de4f273e1779d8109936335d397153c2cba3

```{r}
# Make predictions on the validation dataset
validation_predictions <- predict(linear_model, newdata = validation_features)

# Calculate MAE, MSE, RMSE, and R-squared
mae <- mean(abs(validation_predictions - validation_label$Umsatz))
mse <- mean((validation_predictions - validation_label$Umsatz)^2)
rmse <- sqrt(mse)
r_squared <- summary(linear_model)$r.squared
# Calculate MAPE
mape <- mean(abs((validation_label$Umsatz - validation_predictions) / validation_label$Umsatz)) * 100


# Print the metrics
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("R-squared:", r_squared, "\n")
cat("Mean Absolute Percentage Error (MAPE):", mape, "%\n")

```

<<<<<<< HEAD
```{r}
# Plotting residuals
par(mfrow = c(2, 2))
plot(baseline_model)


```

## Implementation for different products
=======
# Prediction for test data
>>>>>>> 9204de4f273e1779d8109936335d397153c2cba3

```{r}

# Make predictions on the test dataset
test_predictions <- predict(linear_model, newdata = test_data)


# Convert test_predictions to a tibble with the column name 'Umsatz'
test_predictions_tibble <- tibble(Umsatz = test_predictions)

# Load sample submission data
submission_data <- read_csv("sample_submission.csv")


# Assuming your first tibble is named tibble1 (with 'id') and your second tibble is named tibble2 (with 'Umsatz')
submission_data <- bind_cols(submission_data, test_predictions_tibble)


# Write to a CSV file
write.csv(submission_data, "submission.csv", row.names = FALSE, quote = FALSE)


```

<<<<<<< HEAD
### Brot

```{r}
# Brot
summary(product_models[["Brot"]])  # Replace "Product_Name_Here" with an actual product name

```

### Broetchen

```{r}
# Broetchen
summary(product_models[["Broetchen"]])  

```

### Saisonbrot

```{r}
# Saisonbrot
summary(product_models[["Saisonbrot"]])  
```

### Kuchen

```{r}
# Kuchen
summary(product_models[["Kuchen"]])  
```

### Croissant

```{r}
# Croissant
summary(product_models[["Croissant"]])  
```

### Konditorei

```{r}
# Konditorei
summary(product_models[["Konditorei"]])  
```

```{r}
# Extract R-squared values
r_squared_values <- sapply(product_models, function(model) summary(model)$r.squared)

# Create a data frame for the table
r_squared_df <- data.frame(Produkt = names(r_squared_values), R_squared = r_squared_values)

# Print the data frame (you can copy the output to your Markdown document)
print(r_squared_df, row.names = FALSE)

```

```{r}
library(knitr)
library(kableExtra)

# Assuming 'product_models' is your list of models
r_squared_values <- sapply(product_models, function(model) summary(model)$r.squared)
r_squared_df <- data.frame(Produkt = names(r_squared_values), R_squared = r_squared_values)

# Create a Markdown table
kable(r_squared_df, format = "markdown", col.names = c("Produkt", "RÂ²-Wert")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))


```
=======

>>>>>>> 9204de4f273e1779d8109936335d397153c2cba3
